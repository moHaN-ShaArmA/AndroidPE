// Generated by view binder compiler. Do not edit!
package jkas.androidpe.explorer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.explorer.R;

public final class DialogNewFileBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TextInputLayout TILName;

  @NonNull
  public final MaterialButton btnClass;

  @NonNull
  public final MaterialButton btnDrawable;

  @NonNull
  public final MaterialButton btnEnum;

  @NonNull
  public final MaterialButton btnInterface;

  @NonNull
  public final MaterialButton btnJava;

  @NonNull
  public final MaterialButton btnKotlin;

  @NonNull
  public final MaterialButton btnLayout;

  @NonNull
  public final MaterialButton btnMenu;

  @NonNull
  public final MaterialButton btnOther;

  @NonNull
  public final MaterialButton btnRes;

  @NonNull
  public final MaterialButton btnValues;

  @NonNull
  public final CoordinatorLayout coordinator;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final TextInputEditText textInputName;

  @NonNull
  public final MaterialButtonToggleGroup toggleBtnFileType;

  @NonNull
  public final MaterialButtonToggleGroup toggleBtnTypeData;

  @NonNull
  public final TextView tvInfo;

  private DialogNewFileBinding(@NonNull CoordinatorLayout rootView,
      @NonNull TextInputLayout TILName, @NonNull MaterialButton btnClass,
      @NonNull MaterialButton btnDrawable, @NonNull MaterialButton btnEnum,
      @NonNull MaterialButton btnInterface, @NonNull MaterialButton btnJava,
      @NonNull MaterialButton btnKotlin, @NonNull MaterialButton btnLayout,
      @NonNull MaterialButton btnMenu, @NonNull MaterialButton btnOther,
      @NonNull MaterialButton btnRes, @NonNull MaterialButton btnValues,
      @NonNull CoordinatorLayout coordinator, @NonNull NestedScrollView nestedScrollView,
      @NonNull TextInputEditText textInputName,
      @NonNull MaterialButtonToggleGroup toggleBtnFileType,
      @NonNull MaterialButtonToggleGroup toggleBtnTypeData, @NonNull TextView tvInfo) {
    this.rootView = rootView;
    this.TILName = TILName;
    this.btnClass = btnClass;
    this.btnDrawable = btnDrawable;
    this.btnEnum = btnEnum;
    this.btnInterface = btnInterface;
    this.btnJava = btnJava;
    this.btnKotlin = btnKotlin;
    this.btnLayout = btnLayout;
    this.btnMenu = btnMenu;
    this.btnOther = btnOther;
    this.btnRes = btnRes;
    this.btnValues = btnValues;
    this.coordinator = coordinator;
    this.nestedScrollView = nestedScrollView;
    this.textInputName = textInputName;
    this.toggleBtnFileType = toggleBtnFileType;
    this.toggleBtnTypeData = toggleBtnTypeData;
    this.tvInfo = tvInfo;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogNewFileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogNewFileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_new_file, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogNewFileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TILName;
      TextInputLayout TILName = ViewBindings.findChildViewById(rootView, id);
      if (TILName == null) {
        break missingId;
      }

      id = R.id.btnClass;
      MaterialButton btnClass = ViewBindings.findChildViewById(rootView, id);
      if (btnClass == null) {
        break missingId;
      }

      id = R.id.btnDrawable;
      MaterialButton btnDrawable = ViewBindings.findChildViewById(rootView, id);
      if (btnDrawable == null) {
        break missingId;
      }

      id = R.id.btnEnum;
      MaterialButton btnEnum = ViewBindings.findChildViewById(rootView, id);
      if (btnEnum == null) {
        break missingId;
      }

      id = R.id.btnInterface;
      MaterialButton btnInterface = ViewBindings.findChildViewById(rootView, id);
      if (btnInterface == null) {
        break missingId;
      }

      id = R.id.btnJava;
      MaterialButton btnJava = ViewBindings.findChildViewById(rootView, id);
      if (btnJava == null) {
        break missingId;
      }

      id = R.id.btnKotlin;
      MaterialButton btnKotlin = ViewBindings.findChildViewById(rootView, id);
      if (btnKotlin == null) {
        break missingId;
      }

      id = R.id.btnLayout;
      MaterialButton btnLayout = ViewBindings.findChildViewById(rootView, id);
      if (btnLayout == null) {
        break missingId;
      }

      id = R.id.btnMenu;
      MaterialButton btnMenu = ViewBindings.findChildViewById(rootView, id);
      if (btnMenu == null) {
        break missingId;
      }

      id = R.id.btnOther;
      MaterialButton btnOther = ViewBindings.findChildViewById(rootView, id);
      if (btnOther == null) {
        break missingId;
      }

      id = R.id.btnRes;
      MaterialButton btnRes = ViewBindings.findChildViewById(rootView, id);
      if (btnRes == null) {
        break missingId;
      }

      id = R.id.btnValues;
      MaterialButton btnValues = ViewBindings.findChildViewById(rootView, id);
      if (btnValues == null) {
        break missingId;
      }

      CoordinatorLayout coordinator = (CoordinatorLayout) rootView;

      id = R.id.nested_scroll_view;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.textInputName;
      TextInputEditText textInputName = ViewBindings.findChildViewById(rootView, id);
      if (textInputName == null) {
        break missingId;
      }

      id = R.id.toggleBtnFileType;
      MaterialButtonToggleGroup toggleBtnFileType = ViewBindings.findChildViewById(rootView, id);
      if (toggleBtnFileType == null) {
        break missingId;
      }

      id = R.id.toggleBtnTypeData;
      MaterialButtonToggleGroup toggleBtnTypeData = ViewBindings.findChildViewById(rootView, id);
      if (toggleBtnTypeData == null) {
        break missingId;
      }

      id = R.id.tvInfo;
      TextView tvInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvInfo == null) {
        break missingId;
      }

      return new DialogNewFileBinding((CoordinatorLayout) rootView, TILName, btnClass, btnDrawable,
          btnEnum, btnInterface, btnJava, btnKotlin, btnLayout, btnMenu, btnOther, btnRes,
          btnValues, coordinator, nestedScrollView, textInputName, toggleBtnFileType,
          toggleBtnTypeData, tvInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
