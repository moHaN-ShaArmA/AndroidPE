// Generated by view binder compiler. Do not edit!
package jkas.androidpe.resourcesUtils.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.resourcesUtils.R;

public final class LayoutAttrModifierBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialCardView cardAllAttributes;

  @NonNull
  public final MaterialCardView cardDeclaredAttributes;

  @NonNull
  public final MaterialCardView cardLayout;

  @NonNull
  public final TextInputEditText editId;

  @NonNull
  public final ImageView icAdd;

  @NonNull
  public final ImageView icAll;

  @NonNull
  public final ImageView icDeclared;

  @NonNull
  public final ImageView icDelete;

  @NonNull
  public final ImageView icLayout;

  @NonNull
  public final LinearLayout linAllAttributes;

  @NonNull
  public final LinearLayout linDeclaredAttributes;

  @NonNull
  public final LinearLayout linLayout;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final TextInputLayout tilId;

  @NonNull
  public final TextView tvCopy;

  @NonNull
  public final TextView tvPast;

  @NonNull
  public final TextView tvSubTitle;

  @NonNull
  public final TextView tvTitle;

  private LayoutAttrModifierBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialCardView cardAllAttributes, @NonNull MaterialCardView cardDeclaredAttributes,
      @NonNull MaterialCardView cardLayout, @NonNull TextInputEditText editId,
      @NonNull ImageView icAdd, @NonNull ImageView icAll, @NonNull ImageView icDeclared,
      @NonNull ImageView icDelete, @NonNull ImageView icLayout,
      @NonNull LinearLayout linAllAttributes, @NonNull LinearLayout linDeclaredAttributes,
      @NonNull LinearLayout linLayout, @NonNull NestedScrollView nestedScrollView,
      @NonNull TextInputLayout tilId, @NonNull TextView tvCopy, @NonNull TextView tvPast,
      @NonNull TextView tvSubTitle, @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.cardAllAttributes = cardAllAttributes;
    this.cardDeclaredAttributes = cardDeclaredAttributes;
    this.cardLayout = cardLayout;
    this.editId = editId;
    this.icAdd = icAdd;
    this.icAll = icAll;
    this.icDeclared = icDeclared;
    this.icDelete = icDelete;
    this.icLayout = icLayout;
    this.linAllAttributes = linAllAttributes;
    this.linDeclaredAttributes = linDeclaredAttributes;
    this.linLayout = linLayout;
    this.nestedScrollView = nestedScrollView;
    this.tilId = tilId;
    this.tvCopy = tvCopy;
    this.tvPast = tvPast;
    this.tvSubTitle = tvSubTitle;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutAttrModifierBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutAttrModifierBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_attr_modifier, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutAttrModifierBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardAllAttributes;
      MaterialCardView cardAllAttributes = ViewBindings.findChildViewById(rootView, id);
      if (cardAllAttributes == null) {
        break missingId;
      }

      id = R.id.cardDeclaredAttributes;
      MaterialCardView cardDeclaredAttributes = ViewBindings.findChildViewById(rootView, id);
      if (cardDeclaredAttributes == null) {
        break missingId;
      }

      id = R.id.cardLayout;
      MaterialCardView cardLayout = ViewBindings.findChildViewById(rootView, id);
      if (cardLayout == null) {
        break missingId;
      }

      id = R.id.editId;
      TextInputEditText editId = ViewBindings.findChildViewById(rootView, id);
      if (editId == null) {
        break missingId;
      }

      id = R.id.icAdd;
      ImageView icAdd = ViewBindings.findChildViewById(rootView, id);
      if (icAdd == null) {
        break missingId;
      }

      id = R.id.icAll;
      ImageView icAll = ViewBindings.findChildViewById(rootView, id);
      if (icAll == null) {
        break missingId;
      }

      id = R.id.icDeclared;
      ImageView icDeclared = ViewBindings.findChildViewById(rootView, id);
      if (icDeclared == null) {
        break missingId;
      }

      id = R.id.icDelete;
      ImageView icDelete = ViewBindings.findChildViewById(rootView, id);
      if (icDelete == null) {
        break missingId;
      }

      id = R.id.icLayout;
      ImageView icLayout = ViewBindings.findChildViewById(rootView, id);
      if (icLayout == null) {
        break missingId;
      }

      id = R.id.linAllAttributes;
      LinearLayout linAllAttributes = ViewBindings.findChildViewById(rootView, id);
      if (linAllAttributes == null) {
        break missingId;
      }

      id = R.id.linDeclaredAttributes;
      LinearLayout linDeclaredAttributes = ViewBindings.findChildViewById(rootView, id);
      if (linDeclaredAttributes == null) {
        break missingId;
      }

      id = R.id.linLayout;
      LinearLayout linLayout = ViewBindings.findChildViewById(rootView, id);
      if (linLayout == null) {
        break missingId;
      }

      id = R.id.nested_scroll_view;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.tilId;
      TextInputLayout tilId = ViewBindings.findChildViewById(rootView, id);
      if (tilId == null) {
        break missingId;
      }

      id = R.id.tvCopy;
      TextView tvCopy = ViewBindings.findChildViewById(rootView, id);
      if (tvCopy == null) {
        break missingId;
      }

      id = R.id.tvPast;
      TextView tvPast = ViewBindings.findChildViewById(rootView, id);
      if (tvPast == null) {
        break missingId;
      }

      id = R.id.tvSubTitle;
      TextView tvSubTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvSubTitle == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new LayoutAttrModifierBinding((LinearLayout) rootView, cardAllAttributes,
          cardDeclaredAttributes, cardLayout, editId, icAdd, icAll, icDeclared, icDelete, icLayout,
          linAllAttributes, linDeclaredAttributes, linLayout, nestedScrollView, tilId, tvCopy,
          tvPast, tvSubTitle, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
