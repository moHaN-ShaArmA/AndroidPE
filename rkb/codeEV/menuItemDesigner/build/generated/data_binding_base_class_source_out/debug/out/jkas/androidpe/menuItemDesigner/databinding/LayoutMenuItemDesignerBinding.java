// Generated by view binder compiler. Do not edit!
package jkas.androidpe.menuItemDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.menuItemDesigner.R;

public final class LayoutMenuItemDesignerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final BottomNavigationView bottomNav;

  @NonNull
  public final MaterialButton btnEditor;

  @NonNull
  public final MaterialButton btnTemplate;

  @NonNull
  public final Button btnTest;

  @NonNull
  public final LinearLayout linTreeView;

  @NonNull
  public final MaterialButtonToggleGroup toggleBtn;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView tvMoreInfo;

  @NonNull
  public final ViewFlipper viewFlipper;

  private LayoutMenuItemDesignerBinding(@NonNull LinearLayout rootView,
      @NonNull BottomNavigationView bottomNav, @NonNull MaterialButton btnEditor,
      @NonNull MaterialButton btnTemplate, @NonNull Button btnTest,
      @NonNull LinearLayout linTreeView, @NonNull MaterialButtonToggleGroup toggleBtn,
      @NonNull MaterialToolbar toolbar, @NonNull TextView tvMoreInfo,
      @NonNull ViewFlipper viewFlipper) {
    this.rootView = rootView;
    this.bottomNav = bottomNav;
    this.btnEditor = btnEditor;
    this.btnTemplate = btnTemplate;
    this.btnTest = btnTest;
    this.linTreeView = linTreeView;
    this.toggleBtn = toggleBtn;
    this.toolbar = toolbar;
    this.tvMoreInfo = tvMoreInfo;
    this.viewFlipper = viewFlipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutMenuItemDesignerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutMenuItemDesignerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_menu_item_designer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutMenuItemDesignerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNav;
      BottomNavigationView bottomNav = ViewBindings.findChildViewById(rootView, id);
      if (bottomNav == null) {
        break missingId;
      }

      id = R.id.btnEditor;
      MaterialButton btnEditor = ViewBindings.findChildViewById(rootView, id);
      if (btnEditor == null) {
        break missingId;
      }

      id = R.id.btnTemplate;
      MaterialButton btnTemplate = ViewBindings.findChildViewById(rootView, id);
      if (btnTemplate == null) {
        break missingId;
      }

      id = R.id.btnTest;
      Button btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.linTreeView;
      LinearLayout linTreeView = ViewBindings.findChildViewById(rootView, id);
      if (linTreeView == null) {
        break missingId;
      }

      id = R.id.toggleBtn;
      MaterialButtonToggleGroup toggleBtn = ViewBindings.findChildViewById(rootView, id);
      if (toggleBtn == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvMoreInfo;
      TextView tvMoreInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvMoreInfo == null) {
        break missingId;
      }

      id = R.id.viewFlipper;
      ViewFlipper viewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (viewFlipper == null) {
        break missingId;
      }

      return new LayoutMenuItemDesignerBinding((LinearLayout) rootView, bottomNav, btnEditor,
          btnTemplate, btnTest, linTreeView, toggleBtn, toolbar, tvMoreInfo, viewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
