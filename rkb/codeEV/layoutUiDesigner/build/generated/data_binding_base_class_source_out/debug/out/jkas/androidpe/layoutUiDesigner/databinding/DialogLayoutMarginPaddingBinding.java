// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;

public final class DialogLayoutMarginPaddingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnMargin;

  @NonNull
  public final MaterialButton btnPadding;

  @NonNull
  public final AutoCompleteTextView editBottom;

  @NonNull
  public final AutoCompleteTextView editEnd;

  @NonNull
  public final AutoCompleteTextView editLeft;

  @NonNull
  public final AutoCompleteTextView editMP;

  @NonNull
  public final AutoCompleteTextView editRight;

  @NonNull
  public final AutoCompleteTextView editStart;

  @NonNull
  public final AutoCompleteTextView editTop;

  @NonNull
  public final TextInputLayout tilBottom;

  @NonNull
  public final TextInputLayout tilEnd;

  @NonNull
  public final TextInputLayout tilLeft;

  @NonNull
  public final TextInputLayout tilMP;

  @NonNull
  public final TextInputLayout tilRight;

  @NonNull
  public final TextInputLayout tilStart;

  @NonNull
  public final TextInputLayout tilTop;

  @NonNull
  public final MaterialButtonToggleGroup toggleType;

  @NonNull
  public final TextView tv;

  private DialogLayoutMarginPaddingBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnMargin, @NonNull MaterialButton btnPadding,
      @NonNull AutoCompleteTextView editBottom, @NonNull AutoCompleteTextView editEnd,
      @NonNull AutoCompleteTextView editLeft, @NonNull AutoCompleteTextView editMP,
      @NonNull AutoCompleteTextView editRight, @NonNull AutoCompleteTextView editStart,
      @NonNull AutoCompleteTextView editTop, @NonNull TextInputLayout tilBottom,
      @NonNull TextInputLayout tilEnd, @NonNull TextInputLayout tilLeft,
      @NonNull TextInputLayout tilMP, @NonNull TextInputLayout tilRight,
      @NonNull TextInputLayout tilStart, @NonNull TextInputLayout tilTop,
      @NonNull MaterialButtonToggleGroup toggleType, @NonNull TextView tv) {
    this.rootView = rootView;
    this.btnMargin = btnMargin;
    this.btnPadding = btnPadding;
    this.editBottom = editBottom;
    this.editEnd = editEnd;
    this.editLeft = editLeft;
    this.editMP = editMP;
    this.editRight = editRight;
    this.editStart = editStart;
    this.editTop = editTop;
    this.tilBottom = tilBottom;
    this.tilEnd = tilEnd;
    this.tilLeft = tilLeft;
    this.tilMP = tilMP;
    this.tilRight = tilRight;
    this.tilStart = tilStart;
    this.tilTop = tilTop;
    this.toggleType = toggleType;
    this.tv = tv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLayoutMarginPaddingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLayoutMarginPaddingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_layout_margin_padding, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLayoutMarginPaddingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnMargin;
      MaterialButton btnMargin = ViewBindings.findChildViewById(rootView, id);
      if (btnMargin == null) {
        break missingId;
      }

      id = R.id.btnPadding;
      MaterialButton btnPadding = ViewBindings.findChildViewById(rootView, id);
      if (btnPadding == null) {
        break missingId;
      }

      id = R.id.editBottom;
      AutoCompleteTextView editBottom = ViewBindings.findChildViewById(rootView, id);
      if (editBottom == null) {
        break missingId;
      }

      id = R.id.editEnd;
      AutoCompleteTextView editEnd = ViewBindings.findChildViewById(rootView, id);
      if (editEnd == null) {
        break missingId;
      }

      id = R.id.editLeft;
      AutoCompleteTextView editLeft = ViewBindings.findChildViewById(rootView, id);
      if (editLeft == null) {
        break missingId;
      }

      id = R.id.editMP;
      AutoCompleteTextView editMP = ViewBindings.findChildViewById(rootView, id);
      if (editMP == null) {
        break missingId;
      }

      id = R.id.editRight;
      AutoCompleteTextView editRight = ViewBindings.findChildViewById(rootView, id);
      if (editRight == null) {
        break missingId;
      }

      id = R.id.editStart;
      AutoCompleteTextView editStart = ViewBindings.findChildViewById(rootView, id);
      if (editStart == null) {
        break missingId;
      }

      id = R.id.editTop;
      AutoCompleteTextView editTop = ViewBindings.findChildViewById(rootView, id);
      if (editTop == null) {
        break missingId;
      }

      id = R.id.tilBottom;
      TextInputLayout tilBottom = ViewBindings.findChildViewById(rootView, id);
      if (tilBottom == null) {
        break missingId;
      }

      id = R.id.tilEnd;
      TextInputLayout tilEnd = ViewBindings.findChildViewById(rootView, id);
      if (tilEnd == null) {
        break missingId;
      }

      id = R.id.tilLeft;
      TextInputLayout tilLeft = ViewBindings.findChildViewById(rootView, id);
      if (tilLeft == null) {
        break missingId;
      }

      id = R.id.tilMP;
      TextInputLayout tilMP = ViewBindings.findChildViewById(rootView, id);
      if (tilMP == null) {
        break missingId;
      }

      id = R.id.tilRight;
      TextInputLayout tilRight = ViewBindings.findChildViewById(rootView, id);
      if (tilRight == null) {
        break missingId;
      }

      id = R.id.tilStart;
      TextInputLayout tilStart = ViewBindings.findChildViewById(rootView, id);
      if (tilStart == null) {
        break missingId;
      }

      id = R.id.tilTop;
      TextInputLayout tilTop = ViewBindings.findChildViewById(rootView, id);
      if (tilTop == null) {
        break missingId;
      }

      id = R.id.toggleType;
      MaterialButtonToggleGroup toggleType = ViewBindings.findChildViewById(rootView, id);
      if (toggleType == null) {
        break missingId;
      }

      id = R.id.tv;
      TextView tv = ViewBindings.findChildViewById(rootView, id);
      if (tv == null) {
        break missingId;
      }

      return new DialogLayoutMarginPaddingBinding((LinearLayout) rootView, btnMargin, btnPadding,
          editBottom, editEnd, editLeft, editMP, editRight, editStart, editTop, tilBottom, tilEnd,
          tilLeft, tilMP, tilRight, tilStart, tilTop, toggleType, tv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
