// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;

public final class LayoutTreeViewItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView icChevron;

  @NonNull
  public final ImageView icIcon;

  @NonNull
  public final LinearLayout linChild;

  @NonNull
  public final LinearLayout linView;

  @NonNull
  public final TextView tvIdName;

  @NonNull
  public final TextView tvPkgName;

  private LayoutTreeViewItemBinding(@NonNull LinearLayout rootView, @NonNull ImageView icChevron,
      @NonNull ImageView icIcon, @NonNull LinearLayout linChild, @NonNull LinearLayout linView,
      @NonNull TextView tvIdName, @NonNull TextView tvPkgName) {
    this.rootView = rootView;
    this.icChevron = icChevron;
    this.icIcon = icIcon;
    this.linChild = linChild;
    this.linView = linView;
    this.tvIdName = tvIdName;
    this.tvPkgName = tvPkgName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutTreeViewItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutTreeViewItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_tree_view_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutTreeViewItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ic_chevron;
      ImageView icChevron = ViewBindings.findChildViewById(rootView, id);
      if (icChevron == null) {
        break missingId;
      }

      id = R.id.ic_icon;
      ImageView icIcon = ViewBindings.findChildViewById(rootView, id);
      if (icIcon == null) {
        break missingId;
      }

      id = R.id.linChild;
      LinearLayout linChild = ViewBindings.findChildViewById(rootView, id);
      if (linChild == null) {
        break missingId;
      }

      id = R.id.linView;
      LinearLayout linView = ViewBindings.findChildViewById(rootView, id);
      if (linView == null) {
        break missingId;
      }

      id = R.id.tv_id_name;
      TextView tvIdName = ViewBindings.findChildViewById(rootView, id);
      if (tvIdName == null) {
        break missingId;
      }

      id = R.id.tv_pkg_name;
      TextView tvPkgName = ViewBindings.findChildViewById(rootView, id);
      if (tvPkgName == null) {
        break missingId;
      }

      return new LayoutTreeViewItemBinding((LinearLayout) rootView, icChevron, icIcon, linChild,
          linView, tvIdName, tvPkgName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
