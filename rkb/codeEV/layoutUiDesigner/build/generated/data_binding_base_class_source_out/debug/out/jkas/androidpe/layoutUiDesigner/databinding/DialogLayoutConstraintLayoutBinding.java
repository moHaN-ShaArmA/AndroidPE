// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.slider.RangeSlider;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;

public final class DialogLayoutConstraintLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnBiasCircular;

  @NonNull
  public final MaterialButton btnBottom;

  @NonNull
  public final MaterialButton btnDimensionsMinMax;

  @NonNull
  public final MaterialButton btnHideAttr;

  @NonNull
  public final MaterialButton btnLeft;

  @NonNull
  public final MaterialButton btnMargins;

  @NonNull
  public final MaterialButton btnRelatvePositioning;

  @NonNull
  public final MaterialButton btnRight;

  @NonNull
  public final MaterialButton btnTop;

  @NonNull
  public final MaterialButton btnWeighted;

  @NonNull
  public final CheckBox checkBoxAutoDeleteAttr;

  @NonNull
  public final ImageView icConstraintBottom;

  @NonNull
  public final ImageView icConstraintLeft;

  @NonNull
  public final ImageView icConstraintRight;

  @NonNull
  public final ImageView icConstraintTop;

  @NonNull
  public final ImageView icMoreInfo;

  @NonNull
  public final LinearLayout linAttrs;

  @NonNull
  public final RelativeLayout linConstraintParent;

  @NonNull
  public final LinearLayout linCurrentConstraints;

  @NonNull
  public final RelativeLayout relAddConstraints;

  @NonNull
  public final RangeSlider rsBiasH;

  @NonNull
  public final RangeSlider rsBiasV;

  @NonNull
  public final TextInputEditText tieRatio;

  @NonNull
  public final TextInputLayout tilRatio;

  @NonNull
  public final MaterialButtonToggleGroup toggleType;

  @NonNull
  public final TextView tvAddConstraintBottom;

  @NonNull
  public final TextView tvAddConstraintLeft;

  @NonNull
  public final TextView tvAddConstraintRight;

  @NonNull
  public final TextView tvAddConstraintTop;

  @NonNull
  public final TextView tvRatioHeight;

  @NonNull
  public final TextView tvRatioWidth;

  @NonNull
  public final TextView tvViewName;

  private DialogLayoutConstraintLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnBiasCircular, @NonNull MaterialButton btnBottom,
      @NonNull MaterialButton btnDimensionsMinMax, @NonNull MaterialButton btnHideAttr,
      @NonNull MaterialButton btnLeft, @NonNull MaterialButton btnMargins,
      @NonNull MaterialButton btnRelatvePositioning, @NonNull MaterialButton btnRight,
      @NonNull MaterialButton btnTop, @NonNull MaterialButton btnWeighted,
      @NonNull CheckBox checkBoxAutoDeleteAttr, @NonNull ImageView icConstraintBottom,
      @NonNull ImageView icConstraintLeft, @NonNull ImageView icConstraintRight,
      @NonNull ImageView icConstraintTop, @NonNull ImageView icMoreInfo,
      @NonNull LinearLayout linAttrs, @NonNull RelativeLayout linConstraintParent,
      @NonNull LinearLayout linCurrentConstraints, @NonNull RelativeLayout relAddConstraints,
      @NonNull RangeSlider rsBiasH, @NonNull RangeSlider rsBiasV,
      @NonNull TextInputEditText tieRatio, @NonNull TextInputLayout tilRatio,
      @NonNull MaterialButtonToggleGroup toggleType, @NonNull TextView tvAddConstraintBottom,
      @NonNull TextView tvAddConstraintLeft, @NonNull TextView tvAddConstraintRight,
      @NonNull TextView tvAddConstraintTop, @NonNull TextView tvRatioHeight,
      @NonNull TextView tvRatioWidth, @NonNull TextView tvViewName) {
    this.rootView = rootView;
    this.btnBiasCircular = btnBiasCircular;
    this.btnBottom = btnBottom;
    this.btnDimensionsMinMax = btnDimensionsMinMax;
    this.btnHideAttr = btnHideAttr;
    this.btnLeft = btnLeft;
    this.btnMargins = btnMargins;
    this.btnRelatvePositioning = btnRelatvePositioning;
    this.btnRight = btnRight;
    this.btnTop = btnTop;
    this.btnWeighted = btnWeighted;
    this.checkBoxAutoDeleteAttr = checkBoxAutoDeleteAttr;
    this.icConstraintBottom = icConstraintBottom;
    this.icConstraintLeft = icConstraintLeft;
    this.icConstraintRight = icConstraintRight;
    this.icConstraintTop = icConstraintTop;
    this.icMoreInfo = icMoreInfo;
    this.linAttrs = linAttrs;
    this.linConstraintParent = linConstraintParent;
    this.linCurrentConstraints = linCurrentConstraints;
    this.relAddConstraints = relAddConstraints;
    this.rsBiasH = rsBiasH;
    this.rsBiasV = rsBiasV;
    this.tieRatio = tieRatio;
    this.tilRatio = tilRatio;
    this.toggleType = toggleType;
    this.tvAddConstraintBottom = tvAddConstraintBottom;
    this.tvAddConstraintLeft = tvAddConstraintLeft;
    this.tvAddConstraintRight = tvAddConstraintRight;
    this.tvAddConstraintTop = tvAddConstraintTop;
    this.tvRatioHeight = tvRatioHeight;
    this.tvRatioWidth = tvRatioWidth;
    this.tvViewName = tvViewName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLayoutConstraintLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLayoutConstraintLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_layout_constraint_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLayoutConstraintLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBiasCircular;
      MaterialButton btnBiasCircular = ViewBindings.findChildViewById(rootView, id);
      if (btnBiasCircular == null) {
        break missingId;
      }

      id = R.id.btnBottom;
      MaterialButton btnBottom = ViewBindings.findChildViewById(rootView, id);
      if (btnBottom == null) {
        break missingId;
      }

      id = R.id.btnDimensionsMinMax;
      MaterialButton btnDimensionsMinMax = ViewBindings.findChildViewById(rootView, id);
      if (btnDimensionsMinMax == null) {
        break missingId;
      }

      id = R.id.btnHideAttr;
      MaterialButton btnHideAttr = ViewBindings.findChildViewById(rootView, id);
      if (btnHideAttr == null) {
        break missingId;
      }

      id = R.id.btnLeft;
      MaterialButton btnLeft = ViewBindings.findChildViewById(rootView, id);
      if (btnLeft == null) {
        break missingId;
      }

      id = R.id.btnMargins;
      MaterialButton btnMargins = ViewBindings.findChildViewById(rootView, id);
      if (btnMargins == null) {
        break missingId;
      }

      id = R.id.btnRelatvePositioning;
      MaterialButton btnRelatvePositioning = ViewBindings.findChildViewById(rootView, id);
      if (btnRelatvePositioning == null) {
        break missingId;
      }

      id = R.id.btnRight;
      MaterialButton btnRight = ViewBindings.findChildViewById(rootView, id);
      if (btnRight == null) {
        break missingId;
      }

      id = R.id.btnTop;
      MaterialButton btnTop = ViewBindings.findChildViewById(rootView, id);
      if (btnTop == null) {
        break missingId;
      }

      id = R.id.btnWeighted;
      MaterialButton btnWeighted = ViewBindings.findChildViewById(rootView, id);
      if (btnWeighted == null) {
        break missingId;
      }

      id = R.id.checkBoxAutoDeleteAttr;
      CheckBox checkBoxAutoDeleteAttr = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAutoDeleteAttr == null) {
        break missingId;
      }

      id = R.id.icConstraintBottom;
      ImageView icConstraintBottom = ViewBindings.findChildViewById(rootView, id);
      if (icConstraintBottom == null) {
        break missingId;
      }

      id = R.id.icConstraintLeft;
      ImageView icConstraintLeft = ViewBindings.findChildViewById(rootView, id);
      if (icConstraintLeft == null) {
        break missingId;
      }

      id = R.id.icConstraintRight;
      ImageView icConstraintRight = ViewBindings.findChildViewById(rootView, id);
      if (icConstraintRight == null) {
        break missingId;
      }

      id = R.id.icConstraintTop;
      ImageView icConstraintTop = ViewBindings.findChildViewById(rootView, id);
      if (icConstraintTop == null) {
        break missingId;
      }

      id = R.id.icMoreInfo;
      ImageView icMoreInfo = ViewBindings.findChildViewById(rootView, id);
      if (icMoreInfo == null) {
        break missingId;
      }

      id = R.id.linAttrs;
      LinearLayout linAttrs = ViewBindings.findChildViewById(rootView, id);
      if (linAttrs == null) {
        break missingId;
      }

      id = R.id.linConstraintParent;
      RelativeLayout linConstraintParent = ViewBindings.findChildViewById(rootView, id);
      if (linConstraintParent == null) {
        break missingId;
      }

      id = R.id.linCurrentConstraints;
      LinearLayout linCurrentConstraints = ViewBindings.findChildViewById(rootView, id);
      if (linCurrentConstraints == null) {
        break missingId;
      }

      id = R.id.relAddConstraints;
      RelativeLayout relAddConstraints = ViewBindings.findChildViewById(rootView, id);
      if (relAddConstraints == null) {
        break missingId;
      }

      id = R.id.rsBiasH;
      RangeSlider rsBiasH = ViewBindings.findChildViewById(rootView, id);
      if (rsBiasH == null) {
        break missingId;
      }

      id = R.id.rsBiasV;
      RangeSlider rsBiasV = ViewBindings.findChildViewById(rootView, id);
      if (rsBiasV == null) {
        break missingId;
      }

      id = R.id.tieRatio;
      TextInputEditText tieRatio = ViewBindings.findChildViewById(rootView, id);
      if (tieRatio == null) {
        break missingId;
      }

      id = R.id.tilRatio;
      TextInputLayout tilRatio = ViewBindings.findChildViewById(rootView, id);
      if (tilRatio == null) {
        break missingId;
      }

      id = R.id.toggleType;
      MaterialButtonToggleGroup toggleType = ViewBindings.findChildViewById(rootView, id);
      if (toggleType == null) {
        break missingId;
      }

      id = R.id.tvAddConstraintBottom;
      TextView tvAddConstraintBottom = ViewBindings.findChildViewById(rootView, id);
      if (tvAddConstraintBottom == null) {
        break missingId;
      }

      id = R.id.tvAddConstraintLeft;
      TextView tvAddConstraintLeft = ViewBindings.findChildViewById(rootView, id);
      if (tvAddConstraintLeft == null) {
        break missingId;
      }

      id = R.id.tvAddConstraintRight;
      TextView tvAddConstraintRight = ViewBindings.findChildViewById(rootView, id);
      if (tvAddConstraintRight == null) {
        break missingId;
      }

      id = R.id.tvAddConstraintTop;
      TextView tvAddConstraintTop = ViewBindings.findChildViewById(rootView, id);
      if (tvAddConstraintTop == null) {
        break missingId;
      }

      id = R.id.tvRatioHeight;
      TextView tvRatioHeight = ViewBindings.findChildViewById(rootView, id);
      if (tvRatioHeight == null) {
        break missingId;
      }

      id = R.id.tvRatioWidth;
      TextView tvRatioWidth = ViewBindings.findChildViewById(rootView, id);
      if (tvRatioWidth == null) {
        break missingId;
      }

      id = R.id.tvViewName;
      TextView tvViewName = ViewBindings.findChildViewById(rootView, id);
      if (tvViewName == null) {
        break missingId;
      }

      return new DialogLayoutConstraintLayoutBinding((LinearLayout) rootView, btnBiasCircular,
          btnBottom, btnDimensionsMinMax, btnHideAttr, btnLeft, btnMargins, btnRelatvePositioning,
          btnRight, btnTop, btnWeighted, checkBoxAutoDeleteAttr, icConstraintBottom,
          icConstraintLeft, icConstraintRight, icConstraintTop, icMoreInfo, linAttrs,
          linConstraintParent, linCurrentConstraints, relAddConstraints, rsBiasH, rsBiasV, tieRatio,
          tilRatio, toggleType, tvAddConstraintBottom, tvAddConstraintLeft, tvAddConstraintRight,
          tvAddConstraintTop, tvRatioHeight, tvRatioWidth, tvViewName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
