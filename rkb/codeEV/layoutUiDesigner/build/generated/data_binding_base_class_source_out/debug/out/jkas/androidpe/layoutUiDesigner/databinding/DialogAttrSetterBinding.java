// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.slider.RangeSlider;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;
import jkas.androidpe.layoutUiDesigner.palette.MainView;

public final class DialogAttrSetterBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnConstraintLayout;

  @NonNull
  public final MaterialButton btnCoordinatorLayout;

  @NonNull
  public final MaterialButton btnGone;

  @NonNull
  public final MaterialButton btnGravity;

  @NonNull
  public final MaterialButton btnHeight;

  @NonNull
  public final MaterialButton btnInvisible;

  @NonNull
  public final MaterialButton btnLayoutGravity;

  @NonNull
  public final MaterialButton btnPaddingsMarginsEdit;

  @NonNull
  public final MaterialButton btnRelativeLayout;

  @NonNull
  public final MaterialButton btnVisible;

  @NonNull
  public final MaterialButton btnWeight;

  @NonNull
  public final MaterialButton btnWidth;

  @NonNull
  public final CheckBox cbAlpha;

  @NonNull
  public final TextInputEditText editId;

  @NonNull
  public final ImageView icAdd;

  @NonNull
  public final ImageView icAddAttr;

  @NonNull
  public final ImageView icCommonAttr;

  @NonNull
  public final ImageView icDelete;

  @NonNull
  public final ImageView icLayout;

  @NonNull
  public final ImageView icVisibility;

  @NonNull
  public final LinearLayout linAllAttributes;

  @NonNull
  public final LinearLayout linCommonAttributes;

  @NonNull
  public final LinearLayout linIcCommonAttr;

  @NonNull
  public final LinearLayout linIcLayout;

  @NonNull
  public final LinearLayout linLayout;

  @NonNull
  public final RangeSlider rangeSliderAlpha;

  @NonNull
  public final MainView relTemplate;

  @NonNull
  public final TextInputEditText tieBackground;

  @NonNull
  public final TextInputEditText tieBackgroundTint;

  @NonNull
  public final TextInputEditText tieMargins;

  @NonNull
  public final TextInputEditText tiePadding;

  @NonNull
  public final TextInputEditText tieTint;

  @NonNull
  public final TextInputLayout tilBackground;

  @NonNull
  public final TextInputLayout tilBackgroundTint;

  @NonNull
  public final TextInputLayout tilId;

  @NonNull
  public final TextInputLayout tilMargins;

  @NonNull
  public final TextInputLayout tilPaddins;

  @NonNull
  public final TextInputLayout tilTint;

  @NonNull
  public final MaterialButtonToggleGroup toggleBtnVisibility;

  @NonNull
  public final TextView tvBackground;

  @NonNull
  public final TextView tvBackgroundTint;

  @NonNull
  public final TextView tvCopy;

  @NonNull
  public final TextView tvFirstChild;

  @NonNull
  public final TextView tvNext;

  @NonNull
  public final TextView tvParent;

  @NonNull
  public final TextView tvPast;

  @NonNull
  public final TextView tvPrivious;

  @NonNull
  public final TextView tvSubTitle;

  @NonNull
  public final TextView tvTint;

  @NonNull
  public final TextView tvTitle;

  private DialogAttrSetterBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnConstraintLayout, @NonNull MaterialButton btnCoordinatorLayout,
      @NonNull MaterialButton btnGone, @NonNull MaterialButton btnGravity,
      @NonNull MaterialButton btnHeight, @NonNull MaterialButton btnInvisible,
      @NonNull MaterialButton btnLayoutGravity, @NonNull MaterialButton btnPaddingsMarginsEdit,
      @NonNull MaterialButton btnRelativeLayout, @NonNull MaterialButton btnVisible,
      @NonNull MaterialButton btnWeight, @NonNull MaterialButton btnWidth,
      @NonNull CheckBox cbAlpha, @NonNull TextInputEditText editId, @NonNull ImageView icAdd,
      @NonNull ImageView icAddAttr, @NonNull ImageView icCommonAttr, @NonNull ImageView icDelete,
      @NonNull ImageView icLayout, @NonNull ImageView icVisibility,
      @NonNull LinearLayout linAllAttributes, @NonNull LinearLayout linCommonAttributes,
      @NonNull LinearLayout linIcCommonAttr, @NonNull LinearLayout linIcLayout,
      @NonNull LinearLayout linLayout, @NonNull RangeSlider rangeSliderAlpha,
      @NonNull MainView relTemplate, @NonNull TextInputEditText tieBackground,
      @NonNull TextInputEditText tieBackgroundTint, @NonNull TextInputEditText tieMargins,
      @NonNull TextInputEditText tiePadding, @NonNull TextInputEditText tieTint,
      @NonNull TextInputLayout tilBackground, @NonNull TextInputLayout tilBackgroundTint,
      @NonNull TextInputLayout tilId, @NonNull TextInputLayout tilMargins,
      @NonNull TextInputLayout tilPaddins, @NonNull TextInputLayout tilTint,
      @NonNull MaterialButtonToggleGroup toggleBtnVisibility, @NonNull TextView tvBackground,
      @NonNull TextView tvBackgroundTint, @NonNull TextView tvCopy, @NonNull TextView tvFirstChild,
      @NonNull TextView tvNext, @NonNull TextView tvParent, @NonNull TextView tvPast,
      @NonNull TextView tvPrivious, @NonNull TextView tvSubTitle, @NonNull TextView tvTint,
      @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.btnConstraintLayout = btnConstraintLayout;
    this.btnCoordinatorLayout = btnCoordinatorLayout;
    this.btnGone = btnGone;
    this.btnGravity = btnGravity;
    this.btnHeight = btnHeight;
    this.btnInvisible = btnInvisible;
    this.btnLayoutGravity = btnLayoutGravity;
    this.btnPaddingsMarginsEdit = btnPaddingsMarginsEdit;
    this.btnRelativeLayout = btnRelativeLayout;
    this.btnVisible = btnVisible;
    this.btnWeight = btnWeight;
    this.btnWidth = btnWidth;
    this.cbAlpha = cbAlpha;
    this.editId = editId;
    this.icAdd = icAdd;
    this.icAddAttr = icAddAttr;
    this.icCommonAttr = icCommonAttr;
    this.icDelete = icDelete;
    this.icLayout = icLayout;
    this.icVisibility = icVisibility;
    this.linAllAttributes = linAllAttributes;
    this.linCommonAttributes = linCommonAttributes;
    this.linIcCommonAttr = linIcCommonAttr;
    this.linIcLayout = linIcLayout;
    this.linLayout = linLayout;
    this.rangeSliderAlpha = rangeSliderAlpha;
    this.relTemplate = relTemplate;
    this.tieBackground = tieBackground;
    this.tieBackgroundTint = tieBackgroundTint;
    this.tieMargins = tieMargins;
    this.tiePadding = tiePadding;
    this.tieTint = tieTint;
    this.tilBackground = tilBackground;
    this.tilBackgroundTint = tilBackgroundTint;
    this.tilId = tilId;
    this.tilMargins = tilMargins;
    this.tilPaddins = tilPaddins;
    this.tilTint = tilTint;
    this.toggleBtnVisibility = toggleBtnVisibility;
    this.tvBackground = tvBackground;
    this.tvBackgroundTint = tvBackgroundTint;
    this.tvCopy = tvCopy;
    this.tvFirstChild = tvFirstChild;
    this.tvNext = tvNext;
    this.tvParent = tvParent;
    this.tvPast = tvPast;
    this.tvPrivious = tvPrivious;
    this.tvSubTitle = tvSubTitle;
    this.tvTint = tvTint;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAttrSetterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAttrSetterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_attr_setter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAttrSetterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnConstraintLayout;
      MaterialButton btnConstraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (btnConstraintLayout == null) {
        break missingId;
      }

      id = R.id.btnCoordinatorLayout;
      MaterialButton btnCoordinatorLayout = ViewBindings.findChildViewById(rootView, id);
      if (btnCoordinatorLayout == null) {
        break missingId;
      }

      id = R.id.btnGone;
      MaterialButton btnGone = ViewBindings.findChildViewById(rootView, id);
      if (btnGone == null) {
        break missingId;
      }

      id = R.id.btnGravity;
      MaterialButton btnGravity = ViewBindings.findChildViewById(rootView, id);
      if (btnGravity == null) {
        break missingId;
      }

      id = R.id.btnHeight;
      MaterialButton btnHeight = ViewBindings.findChildViewById(rootView, id);
      if (btnHeight == null) {
        break missingId;
      }

      id = R.id.btnInvisible;
      MaterialButton btnInvisible = ViewBindings.findChildViewById(rootView, id);
      if (btnInvisible == null) {
        break missingId;
      }

      id = R.id.btnLayoutGravity;
      MaterialButton btnLayoutGravity = ViewBindings.findChildViewById(rootView, id);
      if (btnLayoutGravity == null) {
        break missingId;
      }

      id = R.id.btnPaddingsMarginsEdit;
      MaterialButton btnPaddingsMarginsEdit = ViewBindings.findChildViewById(rootView, id);
      if (btnPaddingsMarginsEdit == null) {
        break missingId;
      }

      id = R.id.btnRelativeLayout;
      MaterialButton btnRelativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (btnRelativeLayout == null) {
        break missingId;
      }

      id = R.id.btnVisible;
      MaterialButton btnVisible = ViewBindings.findChildViewById(rootView, id);
      if (btnVisible == null) {
        break missingId;
      }

      id = R.id.btnWeight;
      MaterialButton btnWeight = ViewBindings.findChildViewById(rootView, id);
      if (btnWeight == null) {
        break missingId;
      }

      id = R.id.btnWidth;
      MaterialButton btnWidth = ViewBindings.findChildViewById(rootView, id);
      if (btnWidth == null) {
        break missingId;
      }

      id = R.id.cbAlpha;
      CheckBox cbAlpha = ViewBindings.findChildViewById(rootView, id);
      if (cbAlpha == null) {
        break missingId;
      }

      id = R.id.editId;
      TextInputEditText editId = ViewBindings.findChildViewById(rootView, id);
      if (editId == null) {
        break missingId;
      }

      id = R.id.icAdd;
      ImageView icAdd = ViewBindings.findChildViewById(rootView, id);
      if (icAdd == null) {
        break missingId;
      }

      id = R.id.icAddAttr;
      ImageView icAddAttr = ViewBindings.findChildViewById(rootView, id);
      if (icAddAttr == null) {
        break missingId;
      }

      id = R.id.icCommonAttr;
      ImageView icCommonAttr = ViewBindings.findChildViewById(rootView, id);
      if (icCommonAttr == null) {
        break missingId;
      }

      id = R.id.icDelete;
      ImageView icDelete = ViewBindings.findChildViewById(rootView, id);
      if (icDelete == null) {
        break missingId;
      }

      id = R.id.icLayout;
      ImageView icLayout = ViewBindings.findChildViewById(rootView, id);
      if (icLayout == null) {
        break missingId;
      }

      id = R.id.icVisibility;
      ImageView icVisibility = ViewBindings.findChildViewById(rootView, id);
      if (icVisibility == null) {
        break missingId;
      }

      id = R.id.linAllAttributes;
      LinearLayout linAllAttributes = ViewBindings.findChildViewById(rootView, id);
      if (linAllAttributes == null) {
        break missingId;
      }

      id = R.id.linCommonAttributes;
      LinearLayout linCommonAttributes = ViewBindings.findChildViewById(rootView, id);
      if (linCommonAttributes == null) {
        break missingId;
      }

      id = R.id.linIcCommonAttr;
      LinearLayout linIcCommonAttr = ViewBindings.findChildViewById(rootView, id);
      if (linIcCommonAttr == null) {
        break missingId;
      }

      id = R.id.linIcLayout;
      LinearLayout linIcLayout = ViewBindings.findChildViewById(rootView, id);
      if (linIcLayout == null) {
        break missingId;
      }

      id = R.id.linLayout;
      LinearLayout linLayout = ViewBindings.findChildViewById(rootView, id);
      if (linLayout == null) {
        break missingId;
      }

      id = R.id.rangeSliderAlpha;
      RangeSlider rangeSliderAlpha = ViewBindings.findChildViewById(rootView, id);
      if (rangeSliderAlpha == null) {
        break missingId;
      }

      id = R.id.relTemplate;
      MainView relTemplate = ViewBindings.findChildViewById(rootView, id);
      if (relTemplate == null) {
        break missingId;
      }

      id = R.id.tieBackground;
      TextInputEditText tieBackground = ViewBindings.findChildViewById(rootView, id);
      if (tieBackground == null) {
        break missingId;
      }

      id = R.id.tieBackgroundTint;
      TextInputEditText tieBackgroundTint = ViewBindings.findChildViewById(rootView, id);
      if (tieBackgroundTint == null) {
        break missingId;
      }

      id = R.id.tieMargins;
      TextInputEditText tieMargins = ViewBindings.findChildViewById(rootView, id);
      if (tieMargins == null) {
        break missingId;
      }

      id = R.id.tiePadding;
      TextInputEditText tiePadding = ViewBindings.findChildViewById(rootView, id);
      if (tiePadding == null) {
        break missingId;
      }

      id = R.id.tieTint;
      TextInputEditText tieTint = ViewBindings.findChildViewById(rootView, id);
      if (tieTint == null) {
        break missingId;
      }

      id = R.id.tilBackground;
      TextInputLayout tilBackground = ViewBindings.findChildViewById(rootView, id);
      if (tilBackground == null) {
        break missingId;
      }

      id = R.id.tilBackgroundTint;
      TextInputLayout tilBackgroundTint = ViewBindings.findChildViewById(rootView, id);
      if (tilBackgroundTint == null) {
        break missingId;
      }

      id = R.id.tilId;
      TextInputLayout tilId = ViewBindings.findChildViewById(rootView, id);
      if (tilId == null) {
        break missingId;
      }

      id = R.id.tilMargins;
      TextInputLayout tilMargins = ViewBindings.findChildViewById(rootView, id);
      if (tilMargins == null) {
        break missingId;
      }

      id = R.id.tilPaddins;
      TextInputLayout tilPaddins = ViewBindings.findChildViewById(rootView, id);
      if (tilPaddins == null) {
        break missingId;
      }

      id = R.id.tilTint;
      TextInputLayout tilTint = ViewBindings.findChildViewById(rootView, id);
      if (tilTint == null) {
        break missingId;
      }

      id = R.id.toggleBtnVisibility;
      MaterialButtonToggleGroup toggleBtnVisibility = ViewBindings.findChildViewById(rootView, id);
      if (toggleBtnVisibility == null) {
        break missingId;
      }

      id = R.id.tvBackground;
      TextView tvBackground = ViewBindings.findChildViewById(rootView, id);
      if (tvBackground == null) {
        break missingId;
      }

      id = R.id.tvBackgroundTint;
      TextView tvBackgroundTint = ViewBindings.findChildViewById(rootView, id);
      if (tvBackgroundTint == null) {
        break missingId;
      }

      id = R.id.tvCopy;
      TextView tvCopy = ViewBindings.findChildViewById(rootView, id);
      if (tvCopy == null) {
        break missingId;
      }

      id = R.id.tvFirstChild;
      TextView tvFirstChild = ViewBindings.findChildViewById(rootView, id);
      if (tvFirstChild == null) {
        break missingId;
      }

      id = R.id.tvNext;
      TextView tvNext = ViewBindings.findChildViewById(rootView, id);
      if (tvNext == null) {
        break missingId;
      }

      id = R.id.tvParent;
      TextView tvParent = ViewBindings.findChildViewById(rootView, id);
      if (tvParent == null) {
        break missingId;
      }

      id = R.id.tvPast;
      TextView tvPast = ViewBindings.findChildViewById(rootView, id);
      if (tvPast == null) {
        break missingId;
      }

      id = R.id.tvPrivious;
      TextView tvPrivious = ViewBindings.findChildViewById(rootView, id);
      if (tvPrivious == null) {
        break missingId;
      }

      id = R.id.tvSubTitle;
      TextView tvSubTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvSubTitle == null) {
        break missingId;
      }

      id = R.id.tvTint;
      TextView tvTint = ViewBindings.findChildViewById(rootView, id);
      if (tvTint == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new DialogAttrSetterBinding((LinearLayout) rootView, btnConstraintLayout,
          btnCoordinatorLayout, btnGone, btnGravity, btnHeight, btnInvisible, btnLayoutGravity,
          btnPaddingsMarginsEdit, btnRelativeLayout, btnVisible, btnWeight, btnWidth, cbAlpha,
          editId, icAdd, icAddAttr, icCommonAttr, icDelete, icLayout, icVisibility,
          linAllAttributes, linCommonAttributes, linIcCommonAttr, linIcLayout, linLayout,
          rangeSliderAlpha, relTemplate, tieBackground, tieBackgroundTint, tieMargins, tiePadding,
          tieTint, tilBackground, tilBackgroundTint, tilId, tilMargins, tilPaddins, tilTint,
          toggleBtnVisibility, tvBackground, tvBackgroundTint, tvCopy, tvFirstChild, tvNext,
          tvParent, tvPast, tvPrivious, tvSubTitle, tvTint, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
