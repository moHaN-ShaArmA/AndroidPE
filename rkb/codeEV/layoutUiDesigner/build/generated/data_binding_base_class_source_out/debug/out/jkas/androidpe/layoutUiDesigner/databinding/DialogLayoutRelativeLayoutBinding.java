// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;

public final class DialogLayoutRelativeLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnAlign;

  @NonNull
  public final MaterialButton btnCenter;

  @NonNull
  public final MaterialButton btnOthers;

  @NonNull
  public final MaterialButton btnParent;

  @NonNull
  public final MaterialCardView card;

  @NonNull
  public final CheckBox checkBoxRec;

  @NonNull
  public final AutoCompleteTextView editAB;

  @NonNull
  public final AutoCompleteTextView editABL;

  @NonNull
  public final AutoCompleteTextView editABV;

  @NonNull
  public final AutoCompleteTextView editAE;

  @NonNull
  public final AutoCompleteTextView editAL;

  @NonNull
  public final AutoCompleteTextView editAR;

  @NonNull
  public final AutoCompleteTextView editAS;

  @NonNull
  public final AutoCompleteTextView editAT;

  @NonNull
  public final AutoCompleteTextView editBL;

  @NonNull
  public final AutoCompleteTextView editTE;

  @NonNull
  public final AutoCompleteTextView editTL;

  @NonNull
  public final AutoCompleteTextView editTR;

  @NonNull
  public final AutoCompleteTextView editTS;

  @NonNull
  public final MaterialSwitch switchLAPB;

  @NonNull
  public final MaterialSwitch switchLAPE;

  @NonNull
  public final MaterialSwitch switchLAPL;

  @NonNull
  public final MaterialSwitch switchLAPR;

  @NonNull
  public final MaterialSwitch switchLAPS;

  @NonNull
  public final MaterialSwitch switchLAPT;

  @NonNull
  public final MaterialSwitch switchLCH;

  @NonNull
  public final MaterialSwitch switchLCIP;

  @NonNull
  public final MaterialSwitch switchLCV;

  @NonNull
  public final TextInputLayout tilAB;

  @NonNull
  public final TextInputLayout tilABL;

  @NonNull
  public final TextInputLayout tilABV;

  @NonNull
  public final TextInputLayout tilAE;

  @NonNull
  public final TextInputLayout tilAL;

  @NonNull
  public final TextInputLayout tilAR;

  @NonNull
  public final TextInputLayout tilAS;

  @NonNull
  public final TextInputLayout tilAT;

  @NonNull
  public final TextInputLayout tilBL;

  @NonNull
  public final TextInputLayout tilTE;

  @NonNull
  public final TextInputLayout tilTL;

  @NonNull
  public final TextInputLayout tilTR;

  @NonNull
  public final TextInputLayout tilTS;

  @NonNull
  public final MaterialButtonToggleGroup toggleType;

  @NonNull
  public final TextView tv;

  @NonNull
  public final ViewFlipper viewFlipper;

  private DialogLayoutRelativeLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnAlign, @NonNull MaterialButton btnCenter,
      @NonNull MaterialButton btnOthers, @NonNull MaterialButton btnParent,
      @NonNull MaterialCardView card, @NonNull CheckBox checkBoxRec,
      @NonNull AutoCompleteTextView editAB, @NonNull AutoCompleteTextView editABL,
      @NonNull AutoCompleteTextView editABV, @NonNull AutoCompleteTextView editAE,
      @NonNull AutoCompleteTextView editAL, @NonNull AutoCompleteTextView editAR,
      @NonNull AutoCompleteTextView editAS, @NonNull AutoCompleteTextView editAT,
      @NonNull AutoCompleteTextView editBL, @NonNull AutoCompleteTextView editTE,
      @NonNull AutoCompleteTextView editTL, @NonNull AutoCompleteTextView editTR,
      @NonNull AutoCompleteTextView editTS, @NonNull MaterialSwitch switchLAPB,
      @NonNull MaterialSwitch switchLAPE, @NonNull MaterialSwitch switchLAPL,
      @NonNull MaterialSwitch switchLAPR, @NonNull MaterialSwitch switchLAPS,
      @NonNull MaterialSwitch switchLAPT, @NonNull MaterialSwitch switchLCH,
      @NonNull MaterialSwitch switchLCIP, @NonNull MaterialSwitch switchLCV,
      @NonNull TextInputLayout tilAB, @NonNull TextInputLayout tilABL,
      @NonNull TextInputLayout tilABV, @NonNull TextInputLayout tilAE,
      @NonNull TextInputLayout tilAL, @NonNull TextInputLayout tilAR,
      @NonNull TextInputLayout tilAS, @NonNull TextInputLayout tilAT,
      @NonNull TextInputLayout tilBL, @NonNull TextInputLayout tilTE,
      @NonNull TextInputLayout tilTL, @NonNull TextInputLayout tilTR,
      @NonNull TextInputLayout tilTS, @NonNull MaterialButtonToggleGroup toggleType,
      @NonNull TextView tv, @NonNull ViewFlipper viewFlipper) {
    this.rootView = rootView;
    this.btnAlign = btnAlign;
    this.btnCenter = btnCenter;
    this.btnOthers = btnOthers;
    this.btnParent = btnParent;
    this.card = card;
    this.checkBoxRec = checkBoxRec;
    this.editAB = editAB;
    this.editABL = editABL;
    this.editABV = editABV;
    this.editAE = editAE;
    this.editAL = editAL;
    this.editAR = editAR;
    this.editAS = editAS;
    this.editAT = editAT;
    this.editBL = editBL;
    this.editTE = editTE;
    this.editTL = editTL;
    this.editTR = editTR;
    this.editTS = editTS;
    this.switchLAPB = switchLAPB;
    this.switchLAPE = switchLAPE;
    this.switchLAPL = switchLAPL;
    this.switchLAPR = switchLAPR;
    this.switchLAPS = switchLAPS;
    this.switchLAPT = switchLAPT;
    this.switchLCH = switchLCH;
    this.switchLCIP = switchLCIP;
    this.switchLCV = switchLCV;
    this.tilAB = tilAB;
    this.tilABL = tilABL;
    this.tilABV = tilABV;
    this.tilAE = tilAE;
    this.tilAL = tilAL;
    this.tilAR = tilAR;
    this.tilAS = tilAS;
    this.tilAT = tilAT;
    this.tilBL = tilBL;
    this.tilTE = tilTE;
    this.tilTL = tilTL;
    this.tilTR = tilTR;
    this.tilTS = tilTS;
    this.toggleType = toggleType;
    this.tv = tv;
    this.viewFlipper = viewFlipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLayoutRelativeLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLayoutRelativeLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_layout_relative_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLayoutRelativeLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAlign;
      MaterialButton btnAlign = ViewBindings.findChildViewById(rootView, id);
      if (btnAlign == null) {
        break missingId;
      }

      id = R.id.btnCenter;
      MaterialButton btnCenter = ViewBindings.findChildViewById(rootView, id);
      if (btnCenter == null) {
        break missingId;
      }

      id = R.id.btnOthers;
      MaterialButton btnOthers = ViewBindings.findChildViewById(rootView, id);
      if (btnOthers == null) {
        break missingId;
      }

      id = R.id.btnParent;
      MaterialButton btnParent = ViewBindings.findChildViewById(rootView, id);
      if (btnParent == null) {
        break missingId;
      }

      id = R.id.card;
      MaterialCardView card = ViewBindings.findChildViewById(rootView, id);
      if (card == null) {
        break missingId;
      }

      id = R.id.checkBoxRec;
      CheckBox checkBoxRec = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxRec == null) {
        break missingId;
      }

      id = R.id.editAB;
      AutoCompleteTextView editAB = ViewBindings.findChildViewById(rootView, id);
      if (editAB == null) {
        break missingId;
      }

      id = R.id.editABL;
      AutoCompleteTextView editABL = ViewBindings.findChildViewById(rootView, id);
      if (editABL == null) {
        break missingId;
      }

      id = R.id.editABV;
      AutoCompleteTextView editABV = ViewBindings.findChildViewById(rootView, id);
      if (editABV == null) {
        break missingId;
      }

      id = R.id.editAE;
      AutoCompleteTextView editAE = ViewBindings.findChildViewById(rootView, id);
      if (editAE == null) {
        break missingId;
      }

      id = R.id.editAL;
      AutoCompleteTextView editAL = ViewBindings.findChildViewById(rootView, id);
      if (editAL == null) {
        break missingId;
      }

      id = R.id.editAR;
      AutoCompleteTextView editAR = ViewBindings.findChildViewById(rootView, id);
      if (editAR == null) {
        break missingId;
      }

      id = R.id.editAS;
      AutoCompleteTextView editAS = ViewBindings.findChildViewById(rootView, id);
      if (editAS == null) {
        break missingId;
      }

      id = R.id.editAT;
      AutoCompleteTextView editAT = ViewBindings.findChildViewById(rootView, id);
      if (editAT == null) {
        break missingId;
      }

      id = R.id.editBL;
      AutoCompleteTextView editBL = ViewBindings.findChildViewById(rootView, id);
      if (editBL == null) {
        break missingId;
      }

      id = R.id.editTE;
      AutoCompleteTextView editTE = ViewBindings.findChildViewById(rootView, id);
      if (editTE == null) {
        break missingId;
      }

      id = R.id.editTL;
      AutoCompleteTextView editTL = ViewBindings.findChildViewById(rootView, id);
      if (editTL == null) {
        break missingId;
      }

      id = R.id.editTR;
      AutoCompleteTextView editTR = ViewBindings.findChildViewById(rootView, id);
      if (editTR == null) {
        break missingId;
      }

      id = R.id.editTS;
      AutoCompleteTextView editTS = ViewBindings.findChildViewById(rootView, id);
      if (editTS == null) {
        break missingId;
      }

      id = R.id.switchLAPB;
      MaterialSwitch switchLAPB = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPB == null) {
        break missingId;
      }

      id = R.id.switchLAPE;
      MaterialSwitch switchLAPE = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPE == null) {
        break missingId;
      }

      id = R.id.switchLAPL;
      MaterialSwitch switchLAPL = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPL == null) {
        break missingId;
      }

      id = R.id.switchLAPR;
      MaterialSwitch switchLAPR = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPR == null) {
        break missingId;
      }

      id = R.id.switchLAPS;
      MaterialSwitch switchLAPS = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPS == null) {
        break missingId;
      }

      id = R.id.switchLAPT;
      MaterialSwitch switchLAPT = ViewBindings.findChildViewById(rootView, id);
      if (switchLAPT == null) {
        break missingId;
      }

      id = R.id.switchLCH;
      MaterialSwitch switchLCH = ViewBindings.findChildViewById(rootView, id);
      if (switchLCH == null) {
        break missingId;
      }

      id = R.id.switchLCIP;
      MaterialSwitch switchLCIP = ViewBindings.findChildViewById(rootView, id);
      if (switchLCIP == null) {
        break missingId;
      }

      id = R.id.switchLCV;
      MaterialSwitch switchLCV = ViewBindings.findChildViewById(rootView, id);
      if (switchLCV == null) {
        break missingId;
      }

      id = R.id.tilAB;
      TextInputLayout tilAB = ViewBindings.findChildViewById(rootView, id);
      if (tilAB == null) {
        break missingId;
      }

      id = R.id.tilABL;
      TextInputLayout tilABL = ViewBindings.findChildViewById(rootView, id);
      if (tilABL == null) {
        break missingId;
      }

      id = R.id.tilABV;
      TextInputLayout tilABV = ViewBindings.findChildViewById(rootView, id);
      if (tilABV == null) {
        break missingId;
      }

      id = R.id.tilAE;
      TextInputLayout tilAE = ViewBindings.findChildViewById(rootView, id);
      if (tilAE == null) {
        break missingId;
      }

      id = R.id.tilAL;
      TextInputLayout tilAL = ViewBindings.findChildViewById(rootView, id);
      if (tilAL == null) {
        break missingId;
      }

      id = R.id.tilAR;
      TextInputLayout tilAR = ViewBindings.findChildViewById(rootView, id);
      if (tilAR == null) {
        break missingId;
      }

      id = R.id.tilAS;
      TextInputLayout tilAS = ViewBindings.findChildViewById(rootView, id);
      if (tilAS == null) {
        break missingId;
      }

      id = R.id.tilAT;
      TextInputLayout tilAT = ViewBindings.findChildViewById(rootView, id);
      if (tilAT == null) {
        break missingId;
      }

      id = R.id.tilBL;
      TextInputLayout tilBL = ViewBindings.findChildViewById(rootView, id);
      if (tilBL == null) {
        break missingId;
      }

      id = R.id.tilTE;
      TextInputLayout tilTE = ViewBindings.findChildViewById(rootView, id);
      if (tilTE == null) {
        break missingId;
      }

      id = R.id.tilTL;
      TextInputLayout tilTL = ViewBindings.findChildViewById(rootView, id);
      if (tilTL == null) {
        break missingId;
      }

      id = R.id.tilTR;
      TextInputLayout tilTR = ViewBindings.findChildViewById(rootView, id);
      if (tilTR == null) {
        break missingId;
      }

      id = R.id.tilTS;
      TextInputLayout tilTS = ViewBindings.findChildViewById(rootView, id);
      if (tilTS == null) {
        break missingId;
      }

      id = R.id.toggleType;
      MaterialButtonToggleGroup toggleType = ViewBindings.findChildViewById(rootView, id);
      if (toggleType == null) {
        break missingId;
      }

      id = R.id.tv;
      TextView tv = ViewBindings.findChildViewById(rootView, id);
      if (tv == null) {
        break missingId;
      }

      id = R.id.viewFlipper;
      ViewFlipper viewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (viewFlipper == null) {
        break missingId;
      }

      return new DialogLayoutRelativeLayoutBinding((LinearLayout) rootView, btnAlign, btnCenter,
          btnOthers, btnParent, card, checkBoxRec, editAB, editABL, editABV, editAE, editAL, editAR,
          editAS, editAT, editBL, editTE, editTL, editTR, editTS, switchLAPB, switchLAPE,
          switchLAPL, switchLAPR, switchLAPS, switchLAPT, switchLCH, switchLCIP, switchLCV, tilAB,
          tilABL, tilABV, tilAE, tilAL, tilAR, tilAS, tilAT, tilBL, tilTE, tilTL, tilTR, tilTS,
          toggleType, tv, viewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
