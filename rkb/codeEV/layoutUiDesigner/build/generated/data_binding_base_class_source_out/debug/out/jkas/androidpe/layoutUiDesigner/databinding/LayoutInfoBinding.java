// Generated by view binder compiler. Do not edit!
package jkas.androidpe.layoutUiDesigner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.layoutUiDesigner.R;

public final class LayoutInfoBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnInfo;

  @NonNull
  public final MaterialButton btnTreeView;

  @NonNull
  public final LinearLayout linInfo;

  @NonNull
  public final LinearLayout linTree;

  @NonNull
  public final MaterialButtonToggleGroup toggleButton;

  @NonNull
  public final ViewFlipper viewFlipper;

  private LayoutInfoBinding(@NonNull LinearLayout rootView, @NonNull MaterialButton btnInfo,
      @NonNull MaterialButton btnTreeView, @NonNull LinearLayout linInfo,
      @NonNull LinearLayout linTree, @NonNull MaterialButtonToggleGroup toggleButton,
      @NonNull ViewFlipper viewFlipper) {
    this.rootView = rootView;
    this.btnInfo = btnInfo;
    this.btnTreeView = btnTreeView;
    this.linInfo = linInfo;
    this.linTree = linTree;
    this.toggleButton = toggleButton;
    this.viewFlipper = viewFlipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnInfo;
      MaterialButton btnInfo = ViewBindings.findChildViewById(rootView, id);
      if (btnInfo == null) {
        break missingId;
      }

      id = R.id.btnTreeView;
      MaterialButton btnTreeView = ViewBindings.findChildViewById(rootView, id);
      if (btnTreeView == null) {
        break missingId;
      }

      id = R.id.linInfo;
      LinearLayout linInfo = ViewBindings.findChildViewById(rootView, id);
      if (linInfo == null) {
        break missingId;
      }

      id = R.id.linTree;
      LinearLayout linTree = ViewBindings.findChildViewById(rootView, id);
      if (linTree == null) {
        break missingId;
      }

      id = R.id.toggleButton;
      MaterialButtonToggleGroup toggleButton = ViewBindings.findChildViewById(rootView, id);
      if (toggleButton == null) {
        break missingId;
      }

      id = R.id.viewFlipper;
      ViewFlipper viewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (viewFlipper == null) {
        break missingId;
      }

      return new LayoutInfoBinding((LinearLayout) rootView, btnInfo, btnTreeView, linInfo, linTree,
          toggleButton, viewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
