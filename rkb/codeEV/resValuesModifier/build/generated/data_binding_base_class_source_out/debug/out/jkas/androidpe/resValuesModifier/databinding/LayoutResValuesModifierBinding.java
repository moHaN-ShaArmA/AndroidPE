// Generated by view binder compiler. Do not edit!
package jkas.androidpe.resValuesModifier.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.slider.RangeSlider;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.resValuesModifier.R;

public final class LayoutResValuesModifierBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextInputLayout TILname;

  @NonNull
  public final TextInputLayout TILvalue;

  @NonNull
  public final MaterialButton btnAdd;

  @NonNull
  public final MaterialButton btnNext;

  @NonNull
  public final MaterialButton btnPrevious;

  @NonNull
  public final RangeSlider discreteRangeSlider;

  @NonNull
  public final ImageView icDelete;

  @NonNull
  public final LinearLayout linTools;

  @NonNull
  public final TextInputEditText textInputName;

  @NonNull
  public final TextInputEditText textInputValue;

  @NonNull
  public final TextView tvCurrentPosition;

  @NonNull
  public final TextView tvMoreInfo;

  @NonNull
  public final TextView tvTemplate;

  @NonNull
  public final ViewFlipper viewFlipper;

  private LayoutResValuesModifierBinding(@NonNull LinearLayout rootView,
      @NonNull TextInputLayout TILname, @NonNull TextInputLayout TILvalue,
      @NonNull MaterialButton btnAdd, @NonNull MaterialButton btnNext,
      @NonNull MaterialButton btnPrevious, @NonNull RangeSlider discreteRangeSlider,
      @NonNull ImageView icDelete, @NonNull LinearLayout linTools,
      @NonNull TextInputEditText textInputName, @NonNull TextInputEditText textInputValue,
      @NonNull TextView tvCurrentPosition, @NonNull TextView tvMoreInfo,
      @NonNull TextView tvTemplate, @NonNull ViewFlipper viewFlipper) {
    this.rootView = rootView;
    this.TILname = TILname;
    this.TILvalue = TILvalue;
    this.btnAdd = btnAdd;
    this.btnNext = btnNext;
    this.btnPrevious = btnPrevious;
    this.discreteRangeSlider = discreteRangeSlider;
    this.icDelete = icDelete;
    this.linTools = linTools;
    this.textInputName = textInputName;
    this.textInputValue = textInputValue;
    this.tvCurrentPosition = tvCurrentPosition;
    this.tvMoreInfo = tvMoreInfo;
    this.tvTemplate = tvTemplate;
    this.viewFlipper = viewFlipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutResValuesModifierBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutResValuesModifierBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_res_values_modifier, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutResValuesModifierBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TILname;
      TextInputLayout TILname = ViewBindings.findChildViewById(rootView, id);
      if (TILname == null) {
        break missingId;
      }

      id = R.id.TILvalue;
      TextInputLayout TILvalue = ViewBindings.findChildViewById(rootView, id);
      if (TILvalue == null) {
        break missingId;
      }

      id = R.id.btnAdd;
      MaterialButton btnAdd = ViewBindings.findChildViewById(rootView, id);
      if (btnAdd == null) {
        break missingId;
      }

      id = R.id.btnNext;
      MaterialButton btnNext = ViewBindings.findChildViewById(rootView, id);
      if (btnNext == null) {
        break missingId;
      }

      id = R.id.btnPrevious;
      MaterialButton btnPrevious = ViewBindings.findChildViewById(rootView, id);
      if (btnPrevious == null) {
        break missingId;
      }

      id = R.id.discreteRangeSlider;
      RangeSlider discreteRangeSlider = ViewBindings.findChildViewById(rootView, id);
      if (discreteRangeSlider == null) {
        break missingId;
      }

      id = R.id.icDelete;
      ImageView icDelete = ViewBindings.findChildViewById(rootView, id);
      if (icDelete == null) {
        break missingId;
      }

      id = R.id.linTools;
      LinearLayout linTools = ViewBindings.findChildViewById(rootView, id);
      if (linTools == null) {
        break missingId;
      }

      id = R.id.textInputName;
      TextInputEditText textInputName = ViewBindings.findChildViewById(rootView, id);
      if (textInputName == null) {
        break missingId;
      }

      id = R.id.textInputValue;
      TextInputEditText textInputValue = ViewBindings.findChildViewById(rootView, id);
      if (textInputValue == null) {
        break missingId;
      }

      id = R.id.tvCurrentPosition;
      TextView tvCurrentPosition = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentPosition == null) {
        break missingId;
      }

      id = R.id.tvMoreInfo;
      TextView tvMoreInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvMoreInfo == null) {
        break missingId;
      }

      id = R.id.tvTemplate;
      TextView tvTemplate = ViewBindings.findChildViewById(rootView, id);
      if (tvTemplate == null) {
        break missingId;
      }

      id = R.id.viewFlipper;
      ViewFlipper viewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (viewFlipper == null) {
        break missingId;
      }

      return new LayoutResValuesModifierBinding((LinearLayout) rootView, TILname, TILvalue, btnAdd,
          btnNext, btnPrevious, discreteRangeSlider, icDelete, linTools, textInputName,
          textInputValue, tvCurrentPosition, tvMoreInfo, tvTemplate, viewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
