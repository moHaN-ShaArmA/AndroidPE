// Generated by view binder compiler. Do not edit!
package jkas.androidpe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.R;

public final class LayoutCreateNewProjectBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TextInputLayout TILCpp;

  @NonNull
  public final TextInputLayout TILProjectLanguage;

  @NonNull
  public final TextInputLayout TILname;

  @NonNull
  public final TextInputLayout TILpackageName;

  @NonNull
  public final AutoCompleteTextView autoCompTVCppStandard;

  @NonNull
  public final AutoCompleteTextView autoCompTVLanguage;

  @NonNull
  public final AutoCompleteTextView autoCompTVSaveLocation;

  @NonNull
  public final AutoCompleteTextView autoCompTVSdkMin;

  @NonNull
  public final AutoCompleteTextView autoCompTVSdkTarget;

  @NonNull
  public final Button btnCreate;

  @NonNull
  public final MaterialCheckBox cbKotlinScript;

  @NonNull
  public final LinearLayout lin1;

  @NonNull
  public final LinearLayout lin2;

  @NonNull
  public final LinearLayout lin3;

  @NonNull
  public final LottieAnimationView lottieAnim;

  @NonNull
  public final TextInputEditText textInputName;

  @NonNull
  public final TextInputEditText textInputPackageName;

  private LayoutCreateNewProjectBinding(@NonNull CoordinatorLayout rootView,
      @NonNull TextInputLayout TILCpp, @NonNull TextInputLayout TILProjectLanguage,
      @NonNull TextInputLayout TILname, @NonNull TextInputLayout TILpackageName,
      @NonNull AutoCompleteTextView autoCompTVCppStandard,
      @NonNull AutoCompleteTextView autoCompTVLanguage,
      @NonNull AutoCompleteTextView autoCompTVSaveLocation,
      @NonNull AutoCompleteTextView autoCompTVSdkMin,
      @NonNull AutoCompleteTextView autoCompTVSdkTarget, @NonNull Button btnCreate,
      @NonNull MaterialCheckBox cbKotlinScript, @NonNull LinearLayout lin1,
      @NonNull LinearLayout lin2, @NonNull LinearLayout lin3,
      @NonNull LottieAnimationView lottieAnim, @NonNull TextInputEditText textInputName,
      @NonNull TextInputEditText textInputPackageName) {
    this.rootView = rootView;
    this.TILCpp = TILCpp;
    this.TILProjectLanguage = TILProjectLanguage;
    this.TILname = TILname;
    this.TILpackageName = TILpackageName;
    this.autoCompTVCppStandard = autoCompTVCppStandard;
    this.autoCompTVLanguage = autoCompTVLanguage;
    this.autoCompTVSaveLocation = autoCompTVSaveLocation;
    this.autoCompTVSdkMin = autoCompTVSdkMin;
    this.autoCompTVSdkTarget = autoCompTVSdkTarget;
    this.btnCreate = btnCreate;
    this.cbKotlinScript = cbKotlinScript;
    this.lin1 = lin1;
    this.lin2 = lin2;
    this.lin3 = lin3;
    this.lottieAnim = lottieAnim;
    this.textInputName = textInputName;
    this.textInputPackageName = textInputPackageName;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutCreateNewProjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutCreateNewProjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_create_new_project, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutCreateNewProjectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TILCpp;
      TextInputLayout TILCpp = ViewBindings.findChildViewById(rootView, id);
      if (TILCpp == null) {
        break missingId;
      }

      id = R.id.TILProjectLanguage;
      TextInputLayout TILProjectLanguage = ViewBindings.findChildViewById(rootView, id);
      if (TILProjectLanguage == null) {
        break missingId;
      }

      id = R.id.TILname;
      TextInputLayout TILname = ViewBindings.findChildViewById(rootView, id);
      if (TILname == null) {
        break missingId;
      }

      id = R.id.TILpackage_name;
      TextInputLayout TILpackageName = ViewBindings.findChildViewById(rootView, id);
      if (TILpackageName == null) {
        break missingId;
      }

      id = R.id.autoCompTVCppStandard;
      AutoCompleteTextView autoCompTVCppStandard = ViewBindings.findChildViewById(rootView, id);
      if (autoCompTVCppStandard == null) {
        break missingId;
      }

      id = R.id.autoCompTVLanguage;
      AutoCompleteTextView autoCompTVLanguage = ViewBindings.findChildViewById(rootView, id);
      if (autoCompTVLanguage == null) {
        break missingId;
      }

      id = R.id.autoCompTVSaveLocation;
      AutoCompleteTextView autoCompTVSaveLocation = ViewBindings.findChildViewById(rootView, id);
      if (autoCompTVSaveLocation == null) {
        break missingId;
      }

      id = R.id.autoCompTVSdkMin;
      AutoCompleteTextView autoCompTVSdkMin = ViewBindings.findChildViewById(rootView, id);
      if (autoCompTVSdkMin == null) {
        break missingId;
      }

      id = R.id.autoCompTVSdkTarget;
      AutoCompleteTextView autoCompTVSdkTarget = ViewBindings.findChildViewById(rootView, id);
      if (autoCompTVSdkTarget == null) {
        break missingId;
      }

      id = R.id.btnCreate;
      Button btnCreate = ViewBindings.findChildViewById(rootView, id);
      if (btnCreate == null) {
        break missingId;
      }

      id = R.id.cbKotlinScript;
      MaterialCheckBox cbKotlinScript = ViewBindings.findChildViewById(rootView, id);
      if (cbKotlinScript == null) {
        break missingId;
      }

      id = R.id.lin1;
      LinearLayout lin1 = ViewBindings.findChildViewById(rootView, id);
      if (lin1 == null) {
        break missingId;
      }

      id = R.id.lin2;
      LinearLayout lin2 = ViewBindings.findChildViewById(rootView, id);
      if (lin2 == null) {
        break missingId;
      }

      id = R.id.lin3;
      LinearLayout lin3 = ViewBindings.findChildViewById(rootView, id);
      if (lin3 == null) {
        break missingId;
      }

      id = R.id.lottieAnim;
      LottieAnimationView lottieAnim = ViewBindings.findChildViewById(rootView, id);
      if (lottieAnim == null) {
        break missingId;
      }

      id = R.id.textInputName;
      TextInputEditText textInputName = ViewBindings.findChildViewById(rootView, id);
      if (textInputName == null) {
        break missingId;
      }

      id = R.id.textInputPackageName;
      TextInputEditText textInputPackageName = ViewBindings.findChildViewById(rootView, id);
      if (textInputPackageName == null) {
        break missingId;
      }

      return new LayoutCreateNewProjectBinding((CoordinatorLayout) rootView, TILCpp,
          TILProjectLanguage, TILname, TILpackageName, autoCompTVCppStandard, autoCompTVLanguage,
          autoCompTVSaveLocation, autoCompTVSdkMin, autoCompTVSdkTarget, btnCreate, cbKotlinScript,
          lin1, lin2, lin3, lottieAnim, textInputName, textInputPackageName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
