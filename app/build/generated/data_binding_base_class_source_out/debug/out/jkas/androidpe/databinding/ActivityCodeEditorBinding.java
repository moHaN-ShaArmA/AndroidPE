// Generated by view binder compiler. Do not edit!
package jkas.androidpe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import jkas.androidpe.R;
import jkas.androidpe.ui.DrawerLayoutCloseLocked;

public final class ActivityCodeEditorBinding implements ViewBinding {
  @NonNull
  private final DrawerLayoutCloseLocked rootView;

  @NonNull
  public final NavigationView leftDrawer;

  @NonNull
  public final LinearLayout linContainer;

  @NonNull
  public final LinearLayout linForFullScreen;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final MaterialToolbar toolBar;

  @NonNull
  public final TextView tvInfo;

  @NonNull
  public final ViewFlipper viewFlipper;

  private ActivityCodeEditorBinding(@NonNull DrawerLayoutCloseLocked rootView,
      @NonNull NavigationView leftDrawer, @NonNull LinearLayout linContainer,
      @NonNull LinearLayout linForFullScreen, @NonNull TabLayout tabLayout,
      @NonNull MaterialToolbar toolBar, @NonNull TextView tvInfo,
      @NonNull ViewFlipper viewFlipper) {
    this.rootView = rootView;
    this.leftDrawer = leftDrawer;
    this.linContainer = linContainer;
    this.linForFullScreen = linForFullScreen;
    this.tabLayout = tabLayout;
    this.toolBar = toolBar;
    this.tvInfo = tvInfo;
    this.viewFlipper = viewFlipper;
  }

  @Override
  @NonNull
  public DrawerLayoutCloseLocked getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCodeEditorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCodeEditorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_code_editor, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCodeEditorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.left_drawer;
      NavigationView leftDrawer = ViewBindings.findChildViewById(rootView, id);
      if (leftDrawer == null) {
        break missingId;
      }

      id = R.id.linContainer;
      LinearLayout linContainer = ViewBindings.findChildViewById(rootView, id);
      if (linContainer == null) {
        break missingId;
      }

      id = R.id.linForFullScreen;
      LinearLayout linForFullScreen = ViewBindings.findChildViewById(rootView, id);
      if (linForFullScreen == null) {
        break missingId;
      }

      id = R.id.tab_layout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.toolBar;
      MaterialToolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.tvInfo;
      TextView tvInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvInfo == null) {
        break missingId;
      }

      id = R.id.view_flipper;
      ViewFlipper viewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (viewFlipper == null) {
        break missingId;
      }

      return new ActivityCodeEditorBinding((DrawerLayoutCloseLocked) rootView, leftDrawer,
          linContainer, linForFullScreen, tabLayout, toolBar, tvInfo, viewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
